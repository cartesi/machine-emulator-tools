name: Build
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest-8-cores
    steps:
      - name: Install libarchive-tools
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential autoconf automake libarchive-dev libarchive-tools pandoc

      # Building from source cause the provided debian package is for Debian Bookworm
      - name: Download, build and install xgenext2fs
        run: |
          wget https://github.com/cartesi/genext2fs/archive/refs/tags/v1.5.6.tar.gz
          echo "34bfc26a037def23b85b676912462a3d126a87ef15c66c212b3500650da44f9e  v1.5.6.tar.gz" | sha256sum -c -
          tar -xzf v1.5.6.tar.gz
          cd genext2fs-1.5.6
          ./autogen.sh
          ./configure
          make
          sudo make install
          rm -rf genext2fs-1.5.6 v1.5.6.tar.gz

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Export makefile variables
        run: make env >> $GITHUB_ENV

      - name: Create version file
        run: make package.json

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Buildx setup
        uses: docker/setup-buildx-action@v3

      - name: Build [${{ env.TOOLS_TARGZ }}]
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ env.TOOLS_IMAGE }}
          push: false
          load: true
          build-args: |
            TOOLS_TARGZ=${{ env.TOOLS_TARGZ }}
            LINUX_HEADERS_URLPATH=${{ env.LINUX_HEADERS_URLPATH }}
            LINUX_HEADERS_SHA256=${{ env.LINUX_HEADERS_SHA256 }}
          cache-from: type=gha,scope=regular,mode=max
          cache-to: type=gha,scope=regular

      - name: Retrieve artifacts
        run: make copy

      - name: Build rootfs
        run: make fs

      - name: Auto-generate rootfs license information
        if: startsWith(github.ref, 'refs/tags/v')
        run: make fs-license

      - name: Upload rootfs license information
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: license
          if-no-files-found: error
          path: |
            ${{ env.TOOLS_ROOTFS }}.html

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          path: |
            ${{ env.TOOLS_TARGZ }}
            ${{ env.TOOLS_ROOTFS }}

      - name: Checksum artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          sha512sum ${{ env.TOOLS_TARGZ }} > ${{ env.TOOLS_TARGZ }}.sha512
          sha512sum ${{ env.TOOLS_ROOTFS }} > ${{ env.TOOLS_ROOTFS }}.sha512

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          prerelease: true
          files: |
            ${{ env.TOOLS_TARGZ }}
            ${{ env.TOOLS_TARGZ }}.sha512
            ${{ env.TOOLS_ROOTFS }}
            ${{ env.TOOLS_ROOTFS }}.html
            ${{ env.TOOLS_ROOTFS }}.sha512

  test:
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Test libcmt mock on host
        run: |
          make -C sys-utils/libcmt/ -j$(nproc) host test

      - name: Test rollup-http-server and echo-dapp client on host
        run: |
          cd rollup-http/rollup-http-server
          MOCK_BUILD=true cargo test -- --show-output --test-threads=1

      - name: Test rollup-http-server api schema
        run: |
          sudo apt-get update
          sudo apt-get install -y wait-for-it python3 python3-pip
          pip3 install schemathesis
          cd rollup-http/rollup-http-server
          wget https://raw.githubusercontent.com/cartesi/openapi-interfaces/v0.9.0/rollup.yaml
          MOCK_BUILD=true cargo run -- "echo 1" &
          wait-for-it localhost:5004 --timeout=30
          st run rollup.yaml --checks all --validate-schema true --hypothesis-phases explicit --base-url http://localhost:5004
