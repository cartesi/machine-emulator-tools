name: Build
on: [push]
jobs:
  tools:
    runs-on: ubuntu-latest-8-cores
    steps:
      - name: Install libarchive-tools
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential autoconf automake libarchive-dev libarchive-tools

      # Building from source cause the provided debian package is for Debian Bookworm
      - name: Download, build and install xgenext2fs
        run: |
          wget https://github.com/cartesi/genext2fs/archive/refs/tags/v1.5.6.tar.gz
          echo "34bfc26a037def23b85b676912462a3d126a87ef15c66c212b3500650da44f9e  v1.5.6.tar.gz" | sha256sum -c -
          tar -xzf v1.5.6.tar.gz
          cd genext2fs-1.5.6
          ./autogen.sh
          ./configure
          make
          sudo make install
          rm -rf genext2fs-1.5.6 v1.5.6.tar.gz

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Export makefile variables
        run: make env >> $GITHUB_ENV

      - name: Create debian package control file
        run: make control

      - name: Buildx setup
        uses: docker/setup-buildx-action@v2

      - name: Build [${{ env.TOOLS_DEB }}]
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ env.TOOLS_IMAGE }}
          push: false
          load: true
          build-args: |
            TOOLS_DEB=${{ env.TOOLS_DEB }}
            IMAGE_KERNEL_VERSION=${{ env.IMAGE_KERNEL_VERSION }}
            LINUX_VERSION=${{ env.LINUX_VERSION }}
            LINUX_HEADERS_URLPATH=${{ env.LINUX_HEADERS_URLPATH }}
          cache-from: type=gha,scope=regular,mode=max
          cache-to: type=gha,scope=regular

      - name: Retrieve artifacts
        run: make copy

      - name: Build rootfs
        run: make fs

      - name: Upload [${{ env.TOOLS_DEB }}]
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.TOOLS_DEB }}

      - name: Upload [${{ env.TOOLS_ROOTFS }}]
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.TOOLS_ROOTFS }}

      - name: Checksum artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          sha512sum ${{ env.TOOLS_DEB }} > ${{ env.TOOLS_DEB }}.sha512
          sha512sum ${{ env.TOOLS_ROOTFS }} > ${{ env.TOOLS_ROOTFS }}.sha512

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          prerelease: true
          files: |
            ${{ env.TOOLS_DEB }}
            ${{ env.TOOLS_DEB }}.sha512
            ${{ env.TOOLS_ROOTFS }}
            ${{ env.TOOLS_ROOTFS }}.sha512

  test-rollup-http-server:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Test rollup-http-server and echo-dapp client
        run: |
          cd rollup-http/rollup-http-server
          echo -e  "[toolchain]\nchannel = \"1.77.2\"" > rust-toolchain.toml
          USE_ROLLUP_BINDINGS_MOCK=1 cargo test -- --show-output --test-threads=1
